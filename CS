def extended_gcd(p,q):
    X0,X1,Y0,Y1=1,0,0,1
    while q:
        q,p,q= p//q,q,p%q 
        X0,X1=X1,X0 - q *X1
        Y0,Y1=Y1,Y0 - q *Y1
    return p,X0,Y0

def get_positive_private_exponent(e,phi_n):
    gcd,x,y=extended_gcd(e,phi_n)
    private_exponent= x%phi_n
    return private_exponent 
e=18
phi_n=41
gcd,x,y= extended_gcd(e,phi_n)
private_exponent= get_positive_private_exponent(e,phi_n)
print(f"The private exponent (d) is: {private_exponent}")

