import random
import math 
import time

def extended_gcd(a,b):
    X0,X1,Y0,Y1=1,0,0,1
    while b:
        q,a,b= a//b,b,a%b 
        X0,X1=X1,X0 - q *X1
        Y0,Y1=Y1,Y0 - q *Y1
    return a,X0,Y0

def choose_public_exponent(phi_n):
    e=random.randrange(2,phi_n)
    while math.gcd(e,phi_n) !=1:
        e=random.randrange(2,phi_n)
    return e 

def get_private_exponent(e,phi):
    gcd,x,y=extended_gcd(e,phi)
    private_exponent= x%phi
    return private_exponent 

def is_prime(num):
    if num <=1:
        return False
    for i in range(2,int(num**0.5)+1):
        if num %i ==0:
            return False
    return True

def check_prime(number):
    while True:
        prime=int(input(number))
        if is_prime(prime):
            return prime 
        else:
            print("Please enter a prime number.")

def encrypt(message,n,e):
    if message >= n:
        raise ValueError("Make sure that the message is less than or equal to N")
    return pow (message,e,n)

def decrypt(ciphertext,n,d):
    return pow(ciphertext,d,n)

def generate_p_q(p,q):
    n = p*q
    phi =(p-1)*(q-1) 
    e= choose_public_exponent(phi)
    factorize_start=time.perf_counter()
    d= get_private_exponent(e,phi)
    factorize_end=time.perf_counter()
    factorize_time= factorize_end-factorize_start
    print(f"The time taken for the factorization function is {factorize_time} seconds")
    public_key =(e,n)
    private_key= (d,n)
    return public_key,private_key, n        

size= int(input("Choose 8 or 16 bits.")) 
if size not in [8,16]:
    raise ValueError("Choose 8 or 16 bits only!")
p= check_prime("Enter a prime number: ")
q= check_prime("Enter a prime number: ")
public_key, private_key, n= generate_p_q(p,q)
if n >=255 and size==8:
    print("The size of n should be 8 bits.")
    raise ValueError ("n isn't 8 bits")
elif n> 65536 and size ==16:
    print("The size of n should be 16 bits.")
    raise ValueError("n isn't 16 bits.")
print("Public key(e,n): ", public_key)
print("Private key(d,n): ", private_key)
message= int(input("Enter a message: "))
ciphertext= encrypt(message,public_key[1],public_key[0])
print(f"Encrypted message: {ciphertext}")
plaintext=decrypt(ciphertext,private_key[1],private_key[0])
print(f"decrypted message: {plaintext}")


def modinv(a,m):
    g,x,y= extended_gcd(a,m)
    if g!=1:
        raise ValueError("modular inverse does not exist")
    else:
        return x%m

def factor(n):
    for i in range(3,n):
        if n%i==0:
            return i
        
def brute_force():
    e= public_key[0]
    n= private_key[1]
    p= factor(n)
    q= n//p
    phi_n= (p-1)*(q-1)
    d_crack=modinv(e,phi_n)
    return d_crack

print("Cracked d: ", brute_force())